import gov.ca.cwds.cals.persistence.model.calsns.rfa.*
import gov.ca.cwds.cals.persistence.model.calsns.dictionaries.*
import gov.ca.cwds.cals.service.dto.rfa.*
import gov.ca.cwds.cals.Constants
import gov.ca.cwds.cals.Constants.Validation.Business
import gov.ca.cwds.cals.Constants.Validation.Business.Code
import gov.ca.cwds.cals.util.Utils
import gov.ca.cwds.rest.exception.IssueDetails;

import org.apache.commons.lang3.StringUtils

global java.util.Set validationDetailsList;

function boolean equalsIncludingBlanks (String val1, String val2) {
    return StringUtils.isAllBlank(val1, val2) || StringUtils.isNoneBlank(val1, val2) && val1.equals(val2);
}

rule "Validate Applicant's preferred phone"
  dialect "mvel"
  agenda-group "applicant-validation"
  when
    $applicant : ApplicantDTO();
    $actualPhone: PhoneDTO() from $applicant.phones;

    exists PhoneDTO(
      ($actualPhone.isPreferred() != null),
      (isPreferred() != null),
      this != $actualPhone,
      $actualPhone.isPreferred(),
      isPreferred()
    ) from $applicant.phones
  then
    IssueDetails details = new IssueDetails();
    details.setCode(Code.APPLICANT_PREFERRED_PHONE);
    details.setUserMessage(Business.APPLICANT_PREFERRED_NUMBER_MESSAGE);
    details.setTechnicalMessage(Constants.BusinessRulesAgendaGroups.APPLICANT_VALIDATION);
    validationDetailsList.add(details);
end

rule "Validate Applicant phone numbers duplication"
  dialect "mvel"
  agenda-group "applicant-validation"
  when
      $applicant: ApplicantDTO()
      $phone: PhoneDTO(!StringUtils.isAllBlank(number, extension)) from $applicant.phones
      exists PhoneDTO(this.uuid != $phone.uuid, equalsIncludingBlanks(number, $phone.number), equalsIncludingBlanks(extension, $phone.extension)) from $applicant.phones
  then
    IssueDetails details = new IssueDetails();
    details.setCode(Code.APPLICANT_PHONE_NUMBERS_DUPLICATION);
    details.setUserMessage(String.format(Constants.Validation.Business.APPLICANT_PHONE_NUMBERS_DUPLICATION_MESSAGE,
       Utils.Phone.formatNumber($phone),
              $applicant.getFirstName() != null ? $applicant.getFirstName() : "",
              $applicant.getLastName() != null ? $applicant.getLastName() : "",
              $applicant.getNameSuffix() != null ? $applicant.getNameSuffix().getValue() : ""));
    details.setTechnicalMessage(Constants.BusinessRulesAgendaGroups.APPLICANT_VALIDATION);
    validationDetailsList.add(details);
end

rule "Validate Applicant first name"
  dialect "mvel"
  agenda-group "applicant-validation"
  when
      $applicant: ApplicantDTO(StringUtils.isBlank(firstName))
  then
    IssueDetails details = new IssueDetails();
    details.setCode(Code.REQUIRED_APPLICANT_FIRST_NAME);
    details.setUserMessage(String.format(Business.APPLICANT_FIRST_NAME_IS_EMPTY_MESSAGE,
      $applicant.getFirstName() != null ? $applicant.getFirstName() : "",
      $applicant.getLastName() != null ? $applicant.getLastName() : "",
      $applicant.getNameSuffix() != null ? $applicant.getNameSuffix().getValue() : ""));
    details.setTechnicalMessage(Constants.BusinessRulesAgendaGroups.APPLICANT_VALIDATION);
    validationDetailsList.add(details);
end

rule "Validate Applicant last name"
  dialect "mvel"
  agenda-group "applicant-validation"
  when
      $applicant: ApplicantDTO(StringUtils.isBlank(lastName))
  then
    IssueDetails details = new IssueDetails();
    details.setCode(Code.REQUIRED_APPLICANT_LAST_NAME);
    details.setUserMessage(String.format(Business.APPLICANT_LAST_NAME_IS_EMPTY_MESSAGE,
       $applicant.getFirstName() != null ? $applicant.getFirstName() : "",
       $applicant.getLastName() != null ? $applicant.getLastName() : "",
       $applicant.getNameSuffix() != null ? $applicant.getNameSuffix().getValue() : ""));
    details.setTechnicalMessage(Constants.BusinessRulesAgendaGroups.APPLICANT_VALIDATION);
    validationDetailsList.add(details);
end
