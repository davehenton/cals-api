import gov.ca.cwds.cals.persistence.model.calsns.dictionaries.AddressType
import gov.ca.cwds.cals.persistence.model.calsns.dictionaries.CountyType
import gov.ca.cwds.cals.persistence.model.calsns.dictionaries.StateType
import gov.ca.cwds.cals.service.dto.rfa.RFA1aFormDTO
import gov.ca.cwds.cals.service.dto.rfa.ResidenceDTO
import gov.ca.cwds.cals.service.dto.rfa.RFAAddressDTO
import gov.ca.cwds.cals.service.dto.rfa.ApplicantDTO
import gov.ca.cwds.cals.service.dto.rfa.DisclosureDTO
import gov.ca.cwds.cals.service.dto.rfa.IdentifiedChildDTO
import gov.ca.cwds.cals.service.dto.rfa.TypedPersonNameDTO
import gov.ca.cwds.cals.service.dto.rfa.PhoneDTO
import gov.ca.cwds.cals.service.dto.rfa.RFA1bFormDTO
import gov.ca.cwds.cals.service.dto.rfa.RFA1cFormDTO
import gov.ca.cwds.cals.service.dto.rfa.OtherAdultDTO
import gov.ca.cwds.cals.service.dto.rfa.ApplicantsHistoryDTO
import gov.ca.cwds.cals.service.dto.rfa.RelationshipToApplicantDTO
import gov.ca.cwds.cals.persistence.model.calsns.dictionaries.RelationshipToApplicantType
import gov.ca.cwds.cals.service.dto.rfa.MinorChildDTO
import gov.ca.cwds.cals.service.dto.rfa.AdultChildDTO
import gov.ca.cwds.cals.util.Utils
import gov.ca.cwds.cals.Constants
import gov.ca.cwds.cals.Constants.Validation
import gov.ca.cwds.cals.Constants.Validation.Business
import gov.ca.cwds.cals.Constants.BusinessRulesAgendaGroups
import gov.ca.cwds.cals.Constants.AddressTypes
import org.apache.commons.lang3.StringUtils
import gov.ca.cwds.rest.exception.IssueDetails
import gov.ca.cwds.rest.exception.IssueType
import gov.ca.cwds.cals.Constants.Validation.Business.Code

import java.util.ArrayList
import java.util.List
import java.util.Random

global java.util.Set validationDetailsList;


function IssueDetails rfa1bIssueDetails(String code, String message, String propery, ApplicantDTO applicant) {
    IssueDetails details = new IssueDetails();
    details.setCode(code);
    details.setUserMessage(String.format(message,
            applicant.getFirstName() != null ? applicant.getFirstName() : "",
            applicant.getLastName() != null ? applicant.getLastName() : "",
            applicant.getNameSuffix() != null ? applicant.getNameSuffix().getValue() : ""));
    details.setTechnicalMessage("RF1b form: " + applicant.getRfa1bForm());
    details.setProperty("rfa1a.applicant[id=" + applicant.getId()+ "].rfa1bForm." + propery);
    return details;
}

function IssueDetails rfa1cIssueDetails(String code, String message, String propery, IdentifiedChildDTO identifiedChild, RFA1cFormDTO rfa1cForm) {
    IssueDetails details = new IssueDetails();
    details.setCode(code);
    details.setUserMessage(String.format(message,
            identifiedChild.getFirstName() != null ? identifiedChild.getFirstName() : "",
            identifiedChild.getLastName() != null ? identifiedChild.getLastName() : "",
            identifiedChild.getNameSuffix() != null ? identifiedChild.getNameSuffix().getValue() : ""));
    details.setTechnicalMessage("RF1c form: " + rfa1cForm);
    details.setProperty("rfa1a.rfa1cForms[id=" + rfa1cForm.getId() + "].identifiedChildren." + propery);
    return details;
}

/*
The following Cards and Fields must have values populated in order for submit to be allowed.

*Additional Applicants*
The above acceptance criteria will be applicable for all subsequent applicants added to the application.



_About This Residence Card_
- Do you Own...
- Weapons In Home
- Body of Water
- Does Any Person Not Listed....
- Language Spoken....
*/



/*
*Applicant 1 - Information*
_Name Card_
- Legal First Name
*/
rule "Validate that Legal First Name is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    eval(StringUtils.isBlank($applicant.getFirstName()))
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].firstName");
    details.setCode(Code.REQUIRED_APPLICANT_FIRST_NAME);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's First Name"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
*Applicant 1 - Information*
_Name Card_
- Legal Last Name
*/
rule "Validate that Legal Last Name is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    eval(StringUtils.isBlank($applicant.getLastName()))
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].lastName");
    details.setCode(Code.REQUIRED_APPLICANT_LAST_NAME);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Last Name"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
For each alias added to a given applicant...
- First Name
*/
rule "Validate that Alias First Name is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $alias : TypedPersonNameDTO() from $applicant.otherNames;
    eval(StringUtils.isBlank($alias.getFirstName()));
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].otherNames[?].firstName");
    details.setCode(Code.REQUIRED_APPLICANT_OTHER_NAMES_FIRST_NAME);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Alias First Name"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end


/*
For each alias added to a given applicant...
- Last Name
*/
rule "Validate that Alias Last Name is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $alias : TypedPersonNameDTO() from $applicant.otherNames;
    eval(StringUtils.isBlank($alias.getLastName()));
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].otherNames[?].lastName");
    details.setCode(Code.REQUIRED_APPLICANT_OTHER_NAMES_LAST_NAME);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Alias Last Name"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_More About Applicant Card_
- Date of Birth
*/
rule "Validate that dateOfBirth is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO(dateOfBirth == null) from $form.applicants;
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].dateOfBirth");
    details.setCode(Code.REQUIRED_APPLICANT_DATE_OF_BIRTH);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Date of Birth"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_More About Applicant Card_
- Date of Birth
*/
rule "Validate that Gender is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO(gender == null) from $form.applicants;
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].gender");
    details.setCode(Code.REQUIRED_APPLICANT_GENDER);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Gender"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_More About Applicant Card_
- Drivers License State (Note: The Drivers License Number and Drivers License State have already been coded to show conditional required for State when Licence Number is entered)
*/
rule "Validate that Drivers License State is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    eval(StringUtils.isNotBlank($applicant.getDriverLicenseNumber()));
    eval($applicant.getDriverLicenseState() == null);
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].driverLicenceState");
    details.setCode(Code.REQUIRED_APPLICANT_DRIVER_LICENSE_STATE);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Driver License State") + " (the field is required if Drivers License Number is present)");
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_More About Applicant Card_
- Drivers License Number (Note: if Driver License State is present Number is required)
*/
rule "Validate that Drivers License Number is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    eval($applicant.getDriverLicenseState() != null);
    eval(StringUtils.isBlank($applicant.getDriverLicenseNumber()));
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].driverLicenceNumber");
    details.setCode(Code.REQUIRED_APPLICANT_DRIVER_LICENSE_NUMBER);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Driver License Number") + " (the field is required if Drivers License State is present)");
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
  _Phone Number Card_
  - Phone Number
  For each new phone number that is added, the Phone Number field will be required
  (Testing Note: User must REMOVE the additional phone number fields from the form if they do not want to have any issues with the required information.)
*/
rule "Validate that Phone Number is present if more than one on the form"
  dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    eval($applicant.getPhones().size() > 1);
    $phones : ArrayList() from collect(PhoneDTO(StringUtils.isBlank(number)) from $applicant.phones)

  then
    for (int i = 0; i < $phones.size(); i++) {
      IssueDetails details = new IssueDetails();
      details.setProperty("rfa1a.applicant[id="+$applicant.getId()+"].phones[?].number");
      details.setCode(Code.REQUIRED_APPLICANT_PHONE_NUMBER);
      details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Applicant's Phone Number"));
      details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
      validationDetailsList.add(details);
    }
end

/*
 *Applicant (s) - Residence*
 _Address Card_
 - Physical Address
*/
rule "Validate that Residence Street Address is present"
      dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    $addresses : ArrayList() from collect(
          RFAAddressDTO(type != null && type.id == 1 /* Residential */, StringUtils.isBlank(streetAddress))
          from $form.residence.addresses
          );
  then
    for (int i = 0; i < $addresses.size(); i++) {
      IssueDetails details = new IssueDetails();
      details.setProperty("rfa1a.residence.addresses[residential_" + i + "].streetAddress");
      details.setCode(Code.REQUIRED_RESIDENCE_STREET_ADDRESS);
      details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Physical Address Street"));
      details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
      validationDetailsList.add(details);
    }
end

/*
 *Applicant (s) - Residence*
 _Address Card_
 - City
*/
rule "Validate that Residence Address Street is present"
      dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    $addresses : ArrayList() from collect(
      RFAAddressDTO(type != null && type.id == 1 /* Residential */, StringUtils.isBlank(city))
      from $form.residence.addresses
      );
  then
    for (int i = 0; i < $addresses.size(); i++) {
      IssueDetails details = new IssueDetails();
      details.setProperty("rfa1a.residence.addresses[residential_" + i + "].city");
      details.setCode(Code.REQUIRED_RESIDENCE_ADDRESS_CITY);
      details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Physical Address City"));
      details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
      validationDetailsList.add(details);
    }
end

/*
 *Applicant (s) - Residence*
 _Address Card_
 - State
*/
rule "Validate that Residence Address State is present"
      dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    $addresses : ArrayList() from collect(
          RFAAddressDTO(type != null && type.id == 1 /* Residential */, state == null)
          from $form.residence.addresses
          );
  then
    for (int i = 0; i < $addresses.size(); i++) {
      IssueDetails details = new IssueDetails();
      details.setProperty("rfa1a.residence.addresses[residential_" + i + "].state");
      details.setCode(Code.REQUIRED_RESIDENCE_ADDRESS_STATE);
      details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Physical Address State"));
      details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
      validationDetailsList.add(details);
    }
end

/*
 *Applicant (s) - Residence*
 _Address Card_
 - Zip
*/
rule "Validate that Residence Address Zip Code is present"
      dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    $addresses : ArrayList() from collect(
              RFAAddressDTO(type != null && type.id == 1 /* Residential */, StringUtils.isBlank(zip))
              from $form.residence.addresses
              );
  then
    for (int i = 0; i < $addresses.size(); i++) {
      IssueDetails details = new IssueDetails();
      details.setProperty("rfa1a.residence.addresses[residential_" + i + "].zip");
      details.setCode(Code.REQUIRED_RESIDENCE_ADDRESS_ZIP);
      details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Physical Address Zip"));
      details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
      validationDetailsList.add(details);
    }
end

/*
 *Applicant (s) - Residence*
 _Address Card_
 - Mailing Address The Same As Physical Address
*/
rule "Validate that Mailing Address The Same As Physical Address field is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    eval($form.getResidence().getPhysicalMailingSimilar() == null);
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.residence.physicalMailingSimilar");
    details.setCode(Code.REQUIRED_PHYSICAL_MAILING_THE_SAME);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Mailing Address The Same As Physical Address"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end


/*
_About This Residence Card_
- Do you Own...
*/

rule "Validate that Ownership field is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    eval($form.getResidence().getResidenceOwnership() == null);
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.residence.residenceOwnership");
    details.setCode(Code.REQUIRED_RESIDENCE_OWNERSHIP);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Residence Ownership"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_About This Residence Card_
- Weapons In Home
*/

rule "Validate that Weapon In Home field is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    eval($form.getResidence().getWeaponInHome() == null);
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.residence.weaponInHome");
    details.setCode(Code.REQUIRED_WEAPON_IN_HOME_FIELD);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Weapon In Home"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_About This Residence Card_
- Body of Water
*/

rule "Validate that Body of Water field is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    eval($form.getResidence().getBodyOfWaterExist() == null);
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.residence.bodyOfWaterExist");
    details.setCode(Code.REQUIRED_BODY_OF_WATER_EXIST_FIELD);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Body of Water"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

/*
_About This Residence Card_
- Does Any Person Not Listed....
*/

rule "Validate that Does Any Person Not Listed... field is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    eval($form.getResidence().getOthersUsingResidenceAsMailing() == null);
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.residence.otherUsingResidenceAsMailing");
    details.setCode(Code.REQUIRED_OTHER_PEOPLE_IN_RESIDENCE);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Does Any Person Not Listed..."));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end


/*
_About This Residence Card_
- Language Spoken....
*/

rule "Validate that Language Spoken field is present"
      dialect "mvel"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    eval($form.getResidence() != null);
    eval($form.getResidence().getHomeLanguages() == null || $form.getResidence().getHomeLanguages().size() == 0) ;
  then
    IssueDetails details = new IssueDetails();
    details.setProperty("rfa1a.residence.bodyOfWaterExist");
    details.setCode(Code.REQUIRED_HOME_LANGUAGES);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE, "Language Spoken"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end


/*
 Minor Child required fields validation
*/

rule "Validate that relationship is filled for Minor Child"
  dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $minorChild: MinorChildDTO( relationshipToApplicants != null && relationshipToApplicants.size() > 0)
        from $form.minorChildren;
    $invalidRelationship :RelationshipToApplicantDTO(
          relationshipToApplicantType != null
          || StringUtils.isNotBlank(relationshipToApplicantFreeform), applicantId == null
        ) from $minorChild.relationshipToApplicants
  then
    IssueDetails details = new IssueDetails();
    details.setProperty(
        "rfa1a.minorChildren[id=" + $minorChild.getId() + "].relationshipToApplicants[?].applicantId");
    details.setCode(Code.REQUIRED_MINOR_CHILD_RELATIONSHIP_APPLICANT_ID);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE,
                                              "applicanId for Minor Child's relationship"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end


rule "Validate that Minor Child's dateOfBirth is present"
  dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $minorChild: MinorChildDTO(
      dateOfBirth == null,
      relationshipToApplicants != null && relationshipToApplicants.size() > 0
    ) from $form.minorChildren;

    RelationshipToApplicantDTO(
      relationshipToApplicantType != null || StringUtils.isNotBlank(relationshipToApplicantFreeform)
    ) from $minorChild.relationshipToApplicants
  then
    IssueDetails details = new IssueDetails();
    details.setProperty(
        "rfa1a.minorChildren[id=" + $minorChild.getId() + "].dateOfBirth");
    details.setCode(Code.REQUIRED_MINOR_CHILD_DATE_OF_BIRTH);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE,
                                              "Date of birth for Minor Child"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

rule "Validate that Minor Child's gender is present"
  dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $minorChild: MinorChildDTO(
          gender == null,
          relationshipToApplicants != null && relationshipToApplicants.size() > 0
        ) from $form.minorChildren;

        RelationshipToApplicantDTO(
          relationshipToApplicantType != null || StringUtils.isNotBlank(relationshipToApplicantFreeform)
        ) from $minorChild.relationshipToApplicants
  then
    IssueDetails details = new IssueDetails();
    details.setProperty(
        "rfa1a.minorChildren[id=" + $minorChild.getId() + "].gender");
    details.setCode(Code.REQUIRED_MINOR_CHILD_GENDER);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE,
                                              "Gender for Minor Child"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

rule "Validate that childFinanciallySupported field is present in the Minor Child object"
  dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $minorChild: MinorChildDTO(
          relationshipToApplicants != null && relationshipToApplicants.size() > 0
        ) from $form.minorChildren;

    $invalidRelationship : RelationshipToApplicantDTO(childFinanciallySupported == null)
        from $minorChild.relationshipToApplicants;
  then
    IssueDetails details = new IssueDetails();
    details.setProperty(
        "rfa1a.minorChildren[id=" + $minorChild.getId() + "].relationshipToApplicants[?].childFinanciallySupported");
    details.setCode(Code.REQUIRED_MINOR_CHILD_FINANCIALLY_SUPPORTED);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE,
                                              "childFinanciallySupported for relationship of Minor Child"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

rule "Validate that childAdopted field is present in the Minor Child object"
  dialect "java"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $minorChild: MinorChildDTO(
          relationshipToApplicants != null && relationshipToApplicants.size() > 0
        ) from $form.minorChildren;

        $invalidRelationship : RelationshipToApplicantDTO(childAdopted == null)
          from $minorChild.relationshipToApplicants;

  then
    IssueDetails details = new IssueDetails();
    details.setProperty(
        "rfa1a.minorChildren[id=" + $minorChild.getId() + "].relationshipToApplicants[?].childAdopted");
    details.setCode(Code.REQUIRED_MINOR_CHILD_ADOPTED);
    details.setUserMessage(String.format(Business.REQUIRED_FIELD_MESSAGE,
                                              "childAdopted for relationship of Minor Child"));
    details.setTechnicalMessage("RFA_1a Form: " + $form.toString());
    validationDetailsList.add(details);
end

rule "RFA1B Form County Validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    RFA1bFormDTO(applicationCounty == null) from $applicant.rfa1bForm
  then
    IssueDetails details = rfa1bIssueDetails(
        Business.Code.RFA1B_FORM_HAS_NO_COUNTY,
        Business.RFA1B_FORM_HAS_NO_COUNTY_MESSAGE,
        "applicationCounty",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form First Name Validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    RFA1bFormDTO(StringUtils.isBlank(applicantFirstName)) from $applicant.rfa1bForm
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_HAS_NO_FIRST_NAME,
        Business.RFA1B_FORM_HAS_NO_FIRST_NAME_MESSAGE,
        "applicantFirstName",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Last Name Validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    RFA1bFormDTO(StringUtils.isBlank(applicantLastName)) from $applicant.rfa1bForm
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_HAS_NO_LAST_NAME,
        Business.RFA1B_FORM_HAS_NO_LAST_NAME_MESSAGE,
        "applicantLastName",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction CA offense validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInCalifornia())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offense)) from $fra1bForm.convictedInCaliforniaDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_CA_OFFENSE_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_CA_OFFENSE_IS_REQUIRED_MESSAGE,
        "convictedInCaliforniaDisclosures.offense",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction CA 'when' validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInCalifornia())
    $disclosure : DisclosureDTO(StringUtils.isBlank(whenOffenseHappen)) from $fra1bForm.convictedInCaliforniaDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_CA_WHEN_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_CA_WHEN_IS_REQUIRED_MESSAGE,
        "convictedInCaliforniaDisclosures.whenOffenseHappen",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction CA offense details validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInCalifornia())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offenseDetails)) from $fra1bForm.convictedInCaliforniaDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_CA_DETAILS_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_CA_DETAILS_IS_REQUIRED_MESSAGE,
        "convictedInCaliforniaDisclosures.offenseDetails",
        $applicant
    );
    validationDetailsList.add(details);
end


rule "RFA1B Form Conviction CA empty disclosure"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInCalifornia())
    not DisclosureDTO() from $fra1bForm.convictedInCaliforniaDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_CA_DISCLOSURE_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_CA_DISCLOSURE_IS_REQUIRED_MESSAGE,
        "convictedInCaliforniaDisclosures",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction CA 'where' validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInCalifornia())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offenseCity)) from $fra1bForm.convictedInCaliforniaDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_CA_WHERE_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_CA_WHERE_IS_REQUIRED_MESSAGE,
        "convictedInCaliforniaDisclosures.offenseCity",
        $applicant
    );
    validationDetailsList.add(details);
end


rule "RFA1B Form Conviction Outside of CA offense validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInAnotherState())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offense)) from $fra1bForm.convictedInAnotherStateDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_OUTSIDE_CA_OFFENSE_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_OUTSIDE_CA_OFFENSE_IS_REQUIRED_MESSAGE,
        "convictedInAnotherStateDisclosures.offense",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction Outside of CA 'when' validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInAnotherState())
    $disclosure : DisclosureDTO(StringUtils.isBlank(whenOffenseHappen)) from $fra1bForm.convictedInAnotherStateDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_OUTSIDE_CA_WHEN_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_OUTSIDE_CA_WHEN_IS_REQUIRED_MESSAGE,
        "convictedInAnotherStateDisclosures.whenOffenseHappen",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction Outside of CA offense details validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInAnotherState())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offenseDetails)) from $fra1bForm.convictedInAnotherStateDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_OUTSIDE_CA_DETAILS_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_OUTSIDE_CA_DETAILS_IS_REQUIRED_MESSAGE,
        "convictedInAnotherStateDisclosures.offenseDetails",
        $applicant
    );
    validationDetailsList.add(details);
end


rule "RFA1B Form Conviction Outside of CA empty disclosure"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInAnotherState())
    not DisclosureDTO() from $fra1bForm.convictedInAnotherStateDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_OUTSIDE_CA_DISCLOSURE_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_OUTSIDE_CA_DISCLOSURE_IS_REQUIRED_MESSAGE,
        "convictedInAnotherStateDisclosures",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Conviction Outside of CA 'where' validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isConvictedInAnotherState())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offenseCity)) from $fra1bForm.convictedInAnotherStateDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CONVICTED_OUTSIDE_CA_WHERE_IS_REQUIRED,
        Business.RFA1B_FORM_CONVICTED_OUTSIDE_CA_WHERE_IS_REQUIRED_MESSAGE,
        "convictedInAnotherStateDisclosures.offenseCity",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Arrested for crime offense validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isArrestedForCrime())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offense)) from $fra1bForm.arrestedForCrimeDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CRIME_OFFENSE_IS_REQUIRED,
        Business.RFA1B_FORM_CRIME_OFFENSE_IS_REQUIRED_MESSAGE,
        "arrestedForCrimeDisclosures.offense",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Arrested from crime 'when' validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isArrestedForCrime())
    $disclosure : DisclosureDTO(StringUtils.isBlank(whenOffenseHappen)) from $fra1bForm.arrestedForCrimeDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CRIME_WHEN_IS_REQUIRED,
        Business.RFA1B_FORM_CRIME_WHEN_IS_REQUIRED_MESSAGE,
        "arrestedForCrimeDisclosures.whenOffenseHappen",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Arrested from crime offense details validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isArrestedForCrime())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offenseDetails)) from $fra1bForm.arrestedForCrimeDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CRIME_DETAILS_IS_REQUIRED,
        Business.RFA1B_FORM_CRIME_DETAILS_IS_REQUIRED_MESSAGE,
        "arrestedForCrimeDisclosures.offenseDetails",
        $applicant
    );
    validationDetailsList.add(details);
end


rule "RFA1B Form Arrested from crime empty disclosure"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isArrestedForCrime())
    not DisclosureDTO() from $fra1bForm.arrestedForCrimeDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CRIME_DISCLOSURE_IS_REQUIRED,
        Business.RFA1B_FORM_CRIME_DISCLOSURE_IS_REQUIRED_MESSAGE,
        "arrestedForCrimeDisclosures",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1B Form Arrested from crime 'where' validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isArrestedForCrime())
    $disclosure : DisclosureDTO(StringUtils.isBlank(offenseCity)) from $fra1bForm.arrestedForCrimeDisclosures
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_CRIME_WHERE_IS_REQUIRED,
        Business.RFA1B_FORM_CRIME_WHERE_IS_REQUIRED_MESSAGE,
        "arrestedForCrimeDisclosures.offenseCity",
        $applicant
    );
    validationDetailsList.add(details);
end


rule "RFA1B other states validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $applicant : ApplicantDTO() from $form.applicants;
    $fra1bForm : RFA1bFormDTO() from $applicant.rfa1bForm
    eval($fra1bForm.isLivedInOtherState())
    not StateType() from $fra1bForm.otherStatesOfLiving
  then
    IssueDetails details = rfa1bIssueDetails(
        Code.RFA1B_FORM_OTHER_STATES_IS_REQUIRED,
        Business.RFA1B_FORM_OTHER_STATES_IS_REQUIRED_MESSAGE,
        "otherStatesOfLiving",
        $applicant
    );
    validationDetailsList.add(details);
end

rule "RFA1C first name validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $rfa1c : RFA1cFormDTO() from $form.rfa1cForms
    $child : IdentifiedChildDTO(StringUtils.isBlank(firstName)) from $rfa1c.identifiedChildren
  then
    IssueDetails details = rfa1cIssueDetails(
        Code.RFA1C_FORM_FIRST_NAME_IS_REQUIRED,
        Business.RFA1C_FORM_FIRST_NAME_IS_REQUIRED_MESSAGE,
        "firstName",
        $child,
        $rfa1c
    );
    validationDetailsList.add(details);
end


rule "RFA1C last name validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $rfa1c : RFA1cFormDTO() from $form.rfa1cForms
    $child : IdentifiedChildDTO(StringUtils.isBlank(lastName)) from $rfa1c.identifiedChildren
  then
    IssueDetails details = rfa1cIssueDetails(
        Code.RFA1C_FORM_LAST_NAME_IS_REQUIRED,
        Business.RFA1C_FORM_LAST_NAME_IS_REQUIRED_MESSAGE,
        "lastName",
        $child,
        $rfa1c
    );
    validationDetailsList.add(details);
end

rule "RFA1C date of birth validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $rfa1c : RFA1cFormDTO() from $form.rfa1cForms
    $child : IdentifiedChildDTO(dateOfBirth == null) from $rfa1c.identifiedChildren
  then
    IssueDetails details = rfa1cIssueDetails(
        Code.RFA1C_FORM_DOB_IS_REQUIRED,
        Business.RFA1C_FORM_DOB_IS_REQUIRED_MESSAGE,
        "dateOfBirth",
        $child,
        $rfa1c
    );
    validationDetailsList.add(details);
end

rule "RFA1C child in home validation"
  agenda-group "form-submission-validation"
  when
    $form : RFA1aFormDTO();
    $rfa1c : RFA1cFormDTO() from $form.rfa1cForms
    $child : IdentifiedChildDTO() from $rfa1c.identifiedChildren
    eval ($child.isChildInHome() == null)
  then
    IssueDetails details = rfa1cIssueDetails(
        Code.RFA1C_FORM_IN_HOME_IS_REQUIRED,
        Business.RFA1C_FORM_IN_HOME_IS_REQUIRED_MESSAGE,
        "childInHome",
        $child,
        $rfa1c
    );
    validationDetailsList.add(details);
end


